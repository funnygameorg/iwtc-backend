pipeline {
    agent any

    stages {

        stage('checkout') {
            steps {
                echo "키값 체크1 : ${AWS_ACCESS_KEY_ID}"
                echo "키값 체크2 : ${AWS_SECRET_KEY}"
                echo "키값 체크2 : ${DB_URL}"
                echo "키값 체크2 : ${DB_USERNAME}"
                echo "키값 체크2 : ${DB_PASSWORD}"
            }
        }


        stage('cleanup') {
            steps {
                script {
                    // 컨테이너를 중지하고 제거
                    def containers = sh(script: 'sudo docker ps -a -q', returnStdout: true).trim()
                    if (containers) {
                        sh "sudo docker stop ${containers}"
                        sh "sudo docker rm ${containers}"
                    }

                    // 이미지를 제거
                    def images = sh(script: 'sudo docker images -q', returnStdout: true).trim()
                    if (images) {
                        sh "sudo docker rmi ${images}"
                    }
                }
            }
        }


        stage('build world-cup image') {
            steps {
                sh "sudo docker build --build-arg SPRING_PROFILES_ACTIVE=prod --build-arg AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} --build-arg AWS_SECRET_KEY=${AWS_SECRET_KEY} --build-arg DB_URL=${DB_URL} --build-arg DB_USERNAME=${DB_USERNAME} --build-arg DB_PASSWORD=${DB_PASSWORD} -f itwc-world-cup.Dockerfile -t itwc-world-cup ."
            }
        }

        stage('build : member image') {
            steps {
                sh "sudo docker build --build-arg SPRING_PROFILES_ACTIVE=prod --build-arg AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} --build-arg AWS_SECRET_KEY=${AWS_SECRET_KEY} --build-arg DB_URL=${DB_URL} --build-arg DB_USERNAME=${DB_USERNAME} --build-arg DB_PASSWORD=${DB_PASSWORD} -f itwc-member.Dockerfile -t member ."
            }
        }

        stage('run : world-cup image') {
            steps {
                sh 'sudo docker run -d -v ./logs:/logs -p 8080:8080 itwc-world-cup'
            }
        }

        stage('run : member image') {
            steps {
                sh 'sudo docker run -d -v ./logs:/logs -p 8081:8081 member'
            }
        }
    }

    post {
        always {
            sh 'sudo docker container prune'
            sh 'sudo docker image prune'
            echo 'bye bye'
        }

    }

}